import streamlit as st
import random
import pandas as pd
import os
import json
from datetime import date

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def render_table(player_list, table_number):
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
    max_length = 20
    shortened_players = [
        name if len(name) <= max_length else name[:max_length - 1] + "‚Ä¶" for name in player_list
    ]

    df = pd.DataFrame({"‚Ññ": range(1, len(player_list) + 1), "–ò–≥—Ä–æ–∫–∏": shortened_players})
    st.markdown(f"### –°—Ç–æ–ª {table_number}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Streamlit native —Ç–∞–±–ª–∏—Ü—É —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ —à–∏—Ä–∏–Ω–µ
    st.dataframe(
        df,
        hide_index=True,
        use_container_width=True,
        column_config={
            "–ò–≥—Ä–æ–∫–∏": st.column_config.TextColumn("–ò–≥—Ä–æ–∫–∏", width="medium")
        }
    )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
def generate_tournament_page():
    st.title("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–∞–¥–∫–∏")

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    tournament_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞")
    tournament_date = st.date_input("–î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞", value=date.today())
    input_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: '1. –ò–º—è üéâ')",
        height=180,
    )
    num_games = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä", min_value=1, max_value=20, value=5, step=1)

    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª—ã"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        input_list = [line.split('. ', 1)[1] for line in input_text.split('\n') if line]
        if not input_list:
            st.warning("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤
        random_lists = []
        history = {name: list() for name in input_list}  # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

        # random_lists = []
        # history = {name: set() for name in input_list}  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤

        for game in range(num_games):
                shuffled_list = input_list[:]
                new_table = []
                for i in range(len(input_list)):
                    # –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏–¥–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö `history_limit` –∏–≥—Ä–∞—Ö
                    # –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–æ—à–ª–æ–π –∏–≥—Ä–µ
                    last_game = random_lists[-1] if random_lists else []
                    candidates = [player for player in shuffled_list if not (last_game and last_game[i] == player)]


                    if not candidates:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–Ω–æ–≤–∞
                        for player in input_list:
                            if len(history[player]) >= 6:
                                history[player].pop(0)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                        candidates = shuffled_list

                    selected = random.choice(candidates)
                    new_table.append(selected)
                    shuffled_list.remove(selected)
                    history[selected].append(i)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ —Å—Ç–æ–ª–æ–º

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                    if len(history[selected]) > 6:
                        history[selected].pop(0)

                random_lists.append(new_table)


        # –í—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
        st.subheader(f"–¢—É—Ä–Ω–∏—Ä: {tournament_name} ({tournament_date})")
        tables_per_row = 5
        for i in range(0, len(random_lists), tables_per_row):
            cols = st.columns(tables_per_row)
            for col, table_index in zip(cols, range(i, i + tables_per_row)):
                if table_index < len(random_lists):
                    with col:
                        render_table(random_lists[table_index], table_index + 1)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_data = {
            "name": tournament_name,
            "date": str(tournament_date),
            "tables": random_lists,
        }

        tournament_filename = f"{tournament_name}_{tournament_date}.json".replace(" ", "_").replace(":", "-")
        if not os.path.exists("tournaments"):
            os.makedirs("tournaments")
        file_path = os.path.join("tournaments", tournament_filename)
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(tournament_data, f, ensure_ascii=False, indent=4)

        st.success(f"–†–∞—Å—Å–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
def view_tournaments_page():
    st.title("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")

    if not os.path.exists("tournaments"):
        st.warning("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä.")
        return

    tournament_files = [f for f in os.listdir("tournaments") if f.endswith(".json")]
    if not tournament_files:
        st.warning("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä.")
        return

    selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", tournament_files)

    if selected_file:
        file_path = os.path.join("tournaments", selected_file)
        with open(file_path, "r", encoding="utf-8") as f:
            tournament_data = json.load(f)

        st.subheader(f"–¢—É—Ä–Ω–∏—Ä: {tournament_data['name']}")
        st.write(f"–î–∞—Ç–∞: {tournament_data['date']}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        random_lists = tournament_data["tables"]

        # –í—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ —Ç—Ä–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É
        
        tables_per_row = 5
        for i in range(0, len(random_lists), tables_per_row):
            cols = st.columns(tables_per_row)
            for col, table_index in zip(cols, range(i, i + tables_per_row)):
                if table_index < len(random_lists):
                    with col:
                        render_table(random_lists[table_index], table_index + 1)



# –ü—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É
logo_path = r'C:\Users\elya\mit\shafl\–ú–ò–¢_–ª–æ–≥–æ.png' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–æ—Ç–∏–ø–∞

def main():
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    st.sidebar.image(logo_path, use_column_width=True)  # –õ–æ–≥–æ—Ç–∏–ø –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.title("–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ä–∞—Å—Å–∞–¥–∫–∞")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    st.sidebar.title("–ú–µ–Ω—é")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤"])

    if page == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤":
        generate_tournament_page()
    elif page == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤":
        view_tournaments_page()

if __name__ == "__main__":
    if not os.path.exists(r"C:\Users\elya\mit\shafl\–ú–ò–¢_–ª–æ–≥–æ.png"):
        st.error("–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'logo' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    else:
        main()

